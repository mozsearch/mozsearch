# ### Runnables ###
#
# The mappings here specify rules that annotate all descendant overrides of
# virtual runnable methods so that when we encounter them in the crossref
# process that we are able to generate `RunnableConstructor` slot edges to their
# constructors and corresponding `RunnableMethod` slot edges back from the
# constructors to the runnable methods.  These will be followed by the
# "traverse" command instead of getting into the infrastructure boilerplate
# around runnables.
#
# This heuristic can also be used for general callback interfaces like
# nsIRequestObserver on each of its listener methods as the effects are
# additive.  For example, a reference to a constructor then becomes a reference
# to both OnStartRequest and OnStopRequest assuming both methods were marked
# as runnable.
#
# TODO: Need to deal with situations like
# https://searchfox.org/mozilla-central/rev/6220909421e5cdb2e706a87f77ba7c6f4f21e4d0/dom/quota/ActorsParent.cpp#7064
# where we have an explicit call to Run made from inside the class.  Although we
# want to avoid including the calls to the base class signature of the method,
# we absolutely want to process in-class concrete references to the Run method,
# maybe even all the way up the hierarchy short of the runnable method itself.
# This case will shortly change in https://phabricator.services.mozilla.com/D182182
# so that OriginOperationBase::RunImmediately will directly be invoking Run
# itself.

[pretty."nsIRunnable::Run"]
runnable = true

[pretty."mozilla::dom::WorkerRunnable::WorkerRun"]
runnable = true

[pretty."mozilla::dom::WorkerMainThreadRunnable::MainThreadRun"]
runnable = true

[pretty."mozilla::dom::WorkerThreadProxySyncRunnable::RunOnMainThread"]
runnable = true

[pretty."nsIProgressEventSink::OnProgress"]
runnable = true

[pretty."nsIProgressEventSink::OnStatus"]
runnable = true

[pretty."nsIRequestObserver::OnStartRequest"]
runnable = true

[pretty."nsIRequestObserver::OnStopRequest"]
runnable = true

[pretty."nsIStreamListener::OnDataAavailable"]
runnable = true

[pretty."nsIStreamLoaderObserver::OnStreamComplete"]
runnable = true

[pretty."nsIGlobalObject"]
labels = ["class-diagram:stop"]

[pretty."nsGlobalWindowInner"]
labels = ["class-diagram:stop"]

[pretty."mozilla::dom::WorkerPrivate"]
labels = ["class-diagram:stop"]

# ### Refcounted Types ###

[[pretty."nsAutoRefCnt".label_owning_class.labels]]
label = "rc"

# (Label atomic refcounted things as both "rc" and "arc".)
[[pretty."mozilla::ThreadSafeAutoRefCnt".label_owning_class.labels]]
label = "rc"
[[pretty."mozilla::ThreadSafeAutoRefCnt".label_owning_class.labels]]
label = "arc"

[[pretty."nsCycleCollectingAutoRefCnt".label_owning_class.labels]]
label = "rc"
[[pretty."nsCycleCollectingAutoRefCnt".label_owning_class.labels]]
label = "ccrc"

[[pretty."mozilla::RefCounted".label_subclasses.labels]]
label = "rc"

# (Label atomic refcounted things as both "rc" and "arc".)
[[pretty."mozilla::AtomicRefCounted".label_subclasses.labels]]
label = "rc"
[[pretty."mozilla::AtomicRefCounted".label_subclasses.labels]]
label = "arc"

# ### Cycle Collection ###
# We use a containing class rule here because the participant is an inner class
# of the cycle collected class.  Compare with the refcount objects which are
# fields on the refcounted class.
[[pretty."nsXPCOMCycleCollectionParticipant".label_containing_class.labels]]
label = "cc"

[[pretty."nsXPCOMCycleCollectionParticipant".label_containing_class_field_uses.labels]]
context_sym_suffix = "::cycleCollection::TraverseNative"
label = "cc-traverse"
[[pretty."nsXPCOMCycleCollectionParticipant".label_containing_class_field_uses.labels]]
context_sym_suffix = "::cycleCollection::Unlink"
label = "cc-unlink"

# ### Label Testing ###
#
# Okay, so, uh, these are only for testing.

[[pretty."outerNS::CycleCollectingMagic".label_containing_class.labels]]
label = "cc"

[[pretty."outerNS::CycleCollectingMagic".label_containing_class_field_uses.labels]]
context_sym_suffix = "::unlink"
label = "cc:unlink"

# ### Value Types ###
#
# Types like nsString don't need to be called out.
[types."nsTString".value]

[types."nsPoint".value]

[types."nsIPrincipal".value]
[types."mozilla::ipc::PrincipalInfo".value]
[types."nsIURI".value]
[types."mozilla::ipc::URIParams".value]
[types."nsIReferrerInfo".value]

[types."mozilla::ipc::IPDLStructMemberWrapper".value]

[types."std::tuple".value]


[types."mozilla::TimeStamp".value]

[types."mozilla::dom::IdType".value]

# The refcount and owning thread are boring and usually there.  These could
# potentially make sense as badges.
[types."nsCycleCollectingAutoRefCnt".value]
[types."nsAutoRefCnt".value]
[types."nsAutoOwningThread".value]

# Maps/Sets are interesting if their values are interesting, so let's mark
# them as values right now.
# TODO: Potentially have this (and arrays) annotate multiplicity.
[types."nsBaseHashtable".value]
[types."nsTBaseHashSet".value]

[types."nsTArray".value]
[types."AutoTArray".value]
[types."mozilla::Vector".value]
[types."HashSet".value]


# ### Variant Types ###
[types."mozilla::Variant".variant]

# ### Sentinel Nothing Types ###
[types."mozilla::Nothing".nothing]

# ### Pointer Types ###
#
# These inform our processing of class fields.
#
# Note that we currently do need to manually provide the namespaced and
# un-namespaced variations of a type.

# Doing this for Maybe<ServiceWorkerDescriptor> right now.
[types."mozilla::Maybe".pointer]
kind = "contains"

[types."nsCOMPtr".pointer]
kind = "strong"

# explicitly not in the mozilla namespace
[types."RefPtr".pointer]
kind = "strong"

[types."mozilla::SafeRefPtr".pointer]
kind = "strong"

[types."SafeRefPtr".pointer]
kind = "strong"

[types."mozilla::ThreadSafeWeakPtr".pointer]
kind = "weak"

[types."mozilla::CheckedUnsafePtr".pointer]
kind = "raw"

[types."ThreadSafeWeakPtr".pointer]
kind = "weak"

[types."mozilla::UniquePtr".pointer]
kind = "unique"

[types."UniquePtr".pointer]
kind = "unique"

[types."mozilla::WeakPtr".pointer]
kind = "weak"

[types."WeakPtr".pointer]
kind = "weak"

[types."std::shared_ptr".pointer]
kind = "strong"

[types."shared_ptr".pointer]
kind = "strong"

[types."std::unique_ptr".pointer]
kind = "unique"

[types."unique_ptr".pointer]
kind = "unique"

[types."std::weak_ptr".pointer]
kind = "weak"

[types."weak_ptr".pointer]
kind = "weak"

[types."nsRefPtrHashKey".pointer]
kind = "strong"

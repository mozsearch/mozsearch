[term.C]
alias = "context"

# For graphing we need to build the pipeline through the traverse call but we
# have the "graph-build" group automatically add the graphing steps.
[term.calls-to]
[[term.calls-to.group.graph-build]]
command = "search-identifiers"
args.positional = "$0"
args.exact-match = true
[[term.calls-to.group.graph-build]]
command = "crossref-lookup"
[[term.calls-to.group.graph-build]]
command = "traverse"
args.edge = "uses"

[term.calls-between]
[[term.calls-between.group.graph-build]]
command = "search-identifiers"
args.positional = "$0"
args.exact-match = true
[[term.calls-between.group.graph-build]]
command = "crossref-lookup"
args.methods = true
[[term.calls-between.group.graph-build]]
command = "traverse"
args.edge = "uses"
args.paths-between = true

# This includes the search and crossref-lookup stages to avoid ordering issues
# for `depth:N calls-to:FOO` but maybe this should be handled by letting a
# precedence be set on the depth to defer it.
[term.depth]
[[term.calls-to.group.graph-build]]
command = "search-identifiers"
[[term.calls-to.group.graph-build]]
command = "crossref-lookup"
[[term.depth.group.graph-build]]
command = "traverse"
args.max-depth = "$0"

[term.context]
[[term.context.group.display]]
command = "augment-results"
args.before = "$0"
args.after = "$0"

# The default term is what gets applied to things without a term.  It can also
# be explicitly referenced by other terms.
[term.default]
[[term.default.expand]]
term = "file"
[[term.default.expand]]
term = "idprefix"
[[term.default.expand]]
term = "text"

[term.file]
[[term.file.group.file-search]]
command = "search-files"
args.positional = "$0"

[term.id]
# We can't do this and `idprefix` in the same command and it's not clear it's
# worth the effort to support both simultaneously.
conflicts = ["idprefix"]
[[term.id.group.semantic-search]]
command = "search-identifiers"
args.positional = "$0"
args.exact-match = true
[[term.id.group.semantic-search]]
command = "crossref-lookup"
[[term.id.group.semantic-search]]
command = "crossref-expand"

[term.idprefix]
[[term.idprefix.group.semantic-search]]
command = "search-identifiers"
args.positional = "$0"
args.exact-match = false
[[term.idprefix.group.semantic-search]]
command = "crossref-lookup"
[[term.idprefix.group.semantic-search]]
command = "crossref-expand"

[term.pathre]
[[term.pathre.group.file-search]]
command = "search-files"
args.pathre = "$0"
## TODO: Implement filtering crossref output by path
## does this really want to be its own stage, or just part of crossref-lookup?
## I guess this may need to come after crossref-expand, so then it would want
## to be its own command.
#[[term.pathre.group.semantic-search]]
#command = "filter-crossref"
#args.pathre = "$0"
[[term.pathre.group.text-search]]
command = "search-text"
args.pathre = "$0"

[term.p]
alias = "path"

[term.path]
[[term.path.expand]]
term = "pathre"
transforms = ["path_glob"]

[term.re]
[[term.re.group.text-search]]
command = "search-text"
args.re = "$0"

[term.sym]
alias = "symbol"

[term.symbol]
[[term.symbol.group.semantic-search]]
command = "search-identifiers"
# TODO: implement this
args.add-sym = "$0"
[[term.symbol.group.semantic-search]]
command = "crossref-lookup"
[[term.symbol.group.semantic-search]]
command = "crossref-expand"

[term.text]
[[term.text.expand]]
term = "re"
transforms = ["regexp_escape"]

[group.file-search]
output = "file-search"
junction = "compile"

[group.semantic-search]
output = "semantic-search"
junction = "compile"

[group.text-search]
output = "text-search"
junction = "compile"

[junction.compile]
command = "compile-results"
output = "compiled"
next = "display"

[group.display]
output = "result"
[[group.display.commands]]
command = "augment-results"

[group.graph-build]
output = "graph"
next = "graph-render"

[group.graph-render]
output = "result"
[[group.graph-render.commands]]
command = "graph"
args.format = "mozsearch"

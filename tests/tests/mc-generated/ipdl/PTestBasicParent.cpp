//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/_ipdltest/PTestBasicParent.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/_ipdltest/TestBasicParent.h"


#include "ipc/IPCMessageUtils.h"
#include "ipc/IPCMessageUtilsSpecializations.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace _ipdltest {


auto PTestBasicParent::ProcessingError(
        Result aCode,
        const char* aReason) -> void
{
}

auto PTestBasicParent::ShouldContinueFromReplyTimeout() -> bool
{
    return true;
}

MOZ_IMPLICIT PTestBasicParent::PTestBasicParent() :
    mozilla::ipc::IToplevelProtocol("PTestBasicParent", PTestBasicMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PTestBasicParent);
}

PTestBasicParent::~PTestBasicParent()
{
    MOZ_COUNT_DTOR(PTestBasicParent);
}

auto PTestBasicParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PTestBasicParent::SendHello() -> bool
{
    UniquePtr<IPC::Message> msg__ = PTestBasic::Msg_Hello(MSG_ROUTING_CONTROL);
    IPC::MessageWriter writer__{
            (*(msg__)),
            this};





    if (mozilla::ipc::LoggingEnabledFor("PTestBasicParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PTestBasicParent",
            this->ToplevelProtocol()->OtherPidMaybeInvalid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PTestBasic::Msg_Hello", OTHER);

    bool sendok__ = ChannelSend(std::move(msg__));
    return sendok__;
}

auto PTestBasicParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PTestBasicParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PTestBasicParent::OnMessageReceived(const Message& msg__) -> PTestBasicParent::Result
{
    switch (msg__.type()) {
    default:
        return MsgNotKnown;
    case SHMEM_CREATED_MESSAGE_TYPE:
        {
            FatalError("this protocol tree does not use shmem");
            return MsgNotKnown;
        }
    case SHMEM_DESTROYED_MESSAGE_TYPE:
        {
            FatalError("this protocol tree does not use shmem");
            return MsgNotKnown;
        }
    }
}

auto PTestBasicParent::OnMessageReceived(
        const Message& msg__,
        UniquePtr<Message>& reply__) -> PTestBasicParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PTestBasicParent::OnCallReceived(
        const Message& msg__,
        UniquePtr<Message>& reply__) -> PTestBasicParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PTestBasicParent::OnChannelClose() -> void
{
    DestroySubtree(NormalShutdown);
    ClearSubtree();
    DeallocShmems();
    if (GetLifecycleProxy()) {
        GetLifecycleProxy()->Release();
    }
}

auto PTestBasicParent::OnChannelError() -> void
{
    DestroySubtree(AbnormalShutdown);
    ClearSubtree();
    DeallocShmems();
    if (GetLifecycleProxy()) {
        GetLifecycleProxy()->Release();
    }
}

auto PTestBasicParent::ClearSubtree() -> void
{
}



} // namespace _ipdltest
} // namespace mozilla
namespace IPC {
auto ParamTraits<mozilla::_ipdltest::PTestBasicParent*>::Write(
        IPC::MessageWriter* aWriter,
        const paramType& aVar) -> void
{
    MOZ_RELEASE_ASSERT(
        aWriter->GetActor(),
        "Cannot serialize managed actors without an actor");

    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aWriter->GetActor()->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    IPC::WriteParam(aWriter, id);
}

auto ParamTraits<mozilla::_ipdltest::PTestBasicParent*>::Read(
        IPC::MessageReader* aReader,
        paramType* aVar) -> bool
{
    MOZ_RELEASE_ASSERT(
        aReader->GetActor(),
        "Cannot deserialize managed actors without an actor");

    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aReader->GetActor()->ReadActor(aReader, true, "PTestBasic", PTestBasicMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::_ipdltest::PTestBasicParent*>(actor.value());
    return true;
}

} // namespace IPC

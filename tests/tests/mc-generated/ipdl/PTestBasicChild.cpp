//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/_ipdltest/PTestBasicChild.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/_ipdltest/TestBasicChild.h"


#include "ipc/IPCMessageUtils.h"
#include "ipc/IPCMessageUtilsSpecializations.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace _ipdltest {


auto PTestBasicChild::ProcessingError(
        Result aCode,
        const char* aReason) -> void
{
}

auto PTestBasicChild::ShouldContinueFromReplyTimeout() -> bool
{
    return true;
}

MOZ_IMPLICIT PTestBasicChild::PTestBasicChild() :
    mozilla::ipc::IToplevelProtocol("PTestBasicChild", PTestBasicMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PTestBasicChild);
}

PTestBasicChild::~PTestBasicChild()
{
    MOZ_COUNT_DTOR(PTestBasicChild);
}

auto PTestBasicChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PTestBasicChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PTestBasicChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PTestBasicChild::OnMessageReceived(const Message& msg__) -> PTestBasicChild::Result
{
    switch (msg__.type()) {
    case PTestBasic::Msg_Hello__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PTestBasicChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PTestBasicChild",
                    this->ToplevelProtocol()->OtherPidMaybeInvalid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PTestBasic::Msg_Hello", OTHER);

            mozilla::ipc::IPCResult __ok = (static_cast<TestBasicChild*>(this))->RecvHello();
            if ((!(__ok))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    case SHMEM_CREATED_MESSAGE_TYPE:
        {
            FatalError("this protocol tree does not use shmem");
            return MsgNotKnown;
        }
    case SHMEM_DESTROYED_MESSAGE_TYPE:
        {
            FatalError("this protocol tree does not use shmem");
            return MsgNotKnown;
        }
    }
}

auto PTestBasicChild::OnMessageReceived(
        const Message& msg__,
        UniquePtr<Message>& reply__) -> PTestBasicChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PTestBasicChild::OnCallReceived(
        const Message& msg__,
        UniquePtr<Message>& reply__) -> PTestBasicChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PTestBasicChild::OnChannelClose() -> void
{
    DestroySubtree(NormalShutdown);
    ClearSubtree();
    DeallocShmems();
    if (GetLifecycleProxy()) {
        GetLifecycleProxy()->Release();
    }
}

auto PTestBasicChild::OnChannelError() -> void
{
    DestroySubtree(AbnormalShutdown);
    ClearSubtree();
    DeallocShmems();
    if (GetLifecycleProxy()) {
        GetLifecycleProxy()->Release();
    }
}

auto PTestBasicChild::ClearSubtree() -> void
{
}



} // namespace _ipdltest
} // namespace mozilla
namespace IPC {
auto ParamTraits<mozilla::_ipdltest::PTestBasicChild*>::Write(
        IPC::MessageWriter* aWriter,
        const paramType& aVar) -> void
{
    MOZ_RELEASE_ASSERT(
        aWriter->GetActor(),
        "Cannot serialize managed actors without an actor");

    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aWriter->GetActor()->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    IPC::WriteParam(aWriter, id);
}

auto ParamTraits<mozilla::_ipdltest::PTestBasicChild*>::Read(
        IPC::MessageReader* aReader,
        paramType* aVar) -> bool
{
    MOZ_RELEASE_ASSERT(
        aReader->GetActor(),
        "Cannot deserialize managed actors without an actor");

    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aReader->GetActor()->ReadActor(aReader, true, "PTestBasic", PTestBasicMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::_ipdltest::PTestBasicChild*>(actor.value());
    return true;
}

} // namespace IPC

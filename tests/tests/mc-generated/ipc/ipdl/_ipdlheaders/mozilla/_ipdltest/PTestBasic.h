//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PTestBasic_h
#define PTestBasic_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"

namespace mozilla {
namespace _ipdltest {
class PTestBasicParent;
} // namespace _ipdltest
} // namespace mozilla
namespace mozilla {
namespace _ipdltest {
class PTestBasicChild;
} // namespace _ipdltest
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PTestBasicChild and PTestBasicParent
//
namespace mozilla {
namespace _ipdltest {
namespace PTestBasic {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::_ipdltest::PTestBasicParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::_ipdltest::PTestBasicChild>* aChild);

nsresult
CreateEndpoints(
        mozilla::ipc::Endpoint<mozilla::_ipdltest::PTestBasicParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::_ipdltest::PTestBasicChild>* aChild);

enum MessageType {
    PTestBasicStart = PTestBasicMsgStart << 16,
    Msg_Hello__ID,
    PTestBasicEnd
};

mozilla::UniquePtr<IPC::Message>
Msg_Hello(int32_t routingId);



} // namespace PTestBasic
} // namespace _ipdltest
} // namespace mozilla

#endif // ifndef PTestBasic_h

#!/usr/bin/env bash

set -x # Show commands
set -eu # Errors/undefined vars are fatal
set -o pipefail # Check all commands in a pipeline

mkdir -p $OBJDIR

# Add the special clang flags.
$MOZSEARCH_PATH/scripts/indexer-setup.py > $INDEX_ROOT/config
source $INDEX_ROOT/config

cd $INDEX_ROOT/files

## Rust build via cargo
# This must happen before other build steps or the `cargo clean` will delete all
# the other build outputs!
export CARGO_TARGET_DIR=$OBJDIR
cargo clean
cargo build

# TODO: Uncomment once https://github.com/rust-lang/rust-analyzer/pull/15633 is
# merged.
#
# cat <<EOF >$OBJDIR/rust-analyzer.json
# {
#   "rust-analyzer.server.extraEnv": {
#     "CARGO_TARGET_DIR": "$OBJDIR"
#   }
# }
# EOF
#
# rust-analyzer scip . --output $OBJDIR/rust.scip --config-path $OBJDIR/rust-analyzer.json

rust-analyzer scip . --output $OBJDIR/rust.scip

# Remove artifacts in the wrong target directory created by rust-analyzer.
# TODO: Remove once we can give it a target dir as per the above.
rm -rf target/

## XPIDL Stuff
XPIDL_SAVED_GENERATED_FILES=$MOZSEARCH_PATH/tests/tests/mc-generated
XPIDL_SAVED_ANALYSIS_FILES=$MOZSEARCH_PATH/tests/tests/mc-analysis
rsync -av $XPIDL_SAVED_GENERATED_FILES/ $OBJDIR
mkdir -p $INDEX_ROOT/analysis/
rsync -av $XPIDL_SAVED_ANALYSIS_FILES/ $INDEX_ROOT/analysis/

## Java stuff
./gradlew --no-daemon clean build
scip-java index-semanticdb build/semanticdb-targetroot --no-emit-inverse-relationships --output=$OBJDIR/gradle.scip
./gradlew --no-daemon clean
rm -rf build/
$MOZSEARCH_PATH/tools/target/release/scip-indexer \
  "$CONFIG_FILE" \
  "$TREE_NAME" \
  --subtree-root "." \
  "$OBJDIR/gradle.scip"

$MOZSEARCH_PATH/tools/target/release/scip-indexer \
  "$CONFIG_FILE" \
  "$TREE_NAME" \
  --subtree-root "." \
  "$OBJDIR/rust.scip"

CPP_FILES=$(
find . -name '*.cpp' | \
  grep -v /ipdl/ | \
  grep -v /field-layout/
)

## C++ Build Stuff
for f in $CPP_FILES
do
  OBJ_FILE=$OBJDIR/${f%%.cpp}.o
  mkdir -p $(dirname $OBJ_FILE)
  $CXX -DTEST_MACRO1 -DTEST_MACRO2 $f -std=c++17 -I . -I $OBJDIR -c -o $OBJ_FILE -Wall
done

## Pseudo per-platform build
MULTI_CPP_FILES=$(
  find ./field-layout/ -name '*.cpp'
)

for PLATFORM in linux64 macosx64 win64
do
  mkdir -p $INDEX_ROOT/analysis-$PLATFORM/
done

for f in $MULTI_CPP_FILES
do
  OBJ_FILE=$OBJDIR/__${PLATFORM}__/${f%%.cpp}.o
  mkdir -p $(dirname $OBJ_FILE)

  for PLATFORM in linux64 macosx64 win64
  do
    $CXX -DTEST_MACRO1 -DTEST_MACRO2 -DTARGET_$PLATFORM $f -std=c++17 -I . -I $OBJDIR -c -o $OBJ_FILE -Wall
    mkdir -p  $(dirname $INDEX_ROOT/analysis-$PLATFORM/$f)
    mv $INDEX_ROOT/analysis/$f $INDEX_ROOT/analysis-$PLATFORM/$f
  done

  pushd $INDEX_ROOT
  $MOZSEARCH_PATH/tools/target/release/merge-analyses analysis-*/$f > analysis/$f
  popd
done

## Re-map files dynamically generated by build.rs to a consistent path.
#
# This is a cut-down version of what we do in mozsearch-mozilla's
# process-tc-artifacts.sh script.  Please consult its documentation, as all
# comments have been removed from this file in the interest of not having the
# comments diverge:
# https://github.com/mozsearch/mozsearch-mozilla/blob/master/shared/process-tc-artifacts.sh

function move_file {
    mkdir -p "$(dirname $2)"
    mv "$1" "$2"
}

# Enter objdir to normalize the rust build script paths.
pushd $OBJDIR

# Difference: We have no RUST_PLATFORM dir at the root, just "debug".
PATH_TRANSFORM="s#^((debug|release)/build/([^/]+)-[0-9a-f]+/out/(.+))\$#\1 __RUST_BUILD_SCRIPT__/\3/\4#p"
find "debug" -type f  | sed -nEe "$PATH_TRANSFORM" | while read -r source target; do
  move_file "$source" "$target"
done

# Leave the objdir now that we're done normalizing build-dir paths.
popd

# Firefox generates files named something like Configure.cpp during
# the build process, but their source files are not around by the time
# we run the analysis. crossref.rs needs to be able to deal with this
# case by ignoring the error and continuing with the other files,
# rather than bailing out. This simulates that case.
#
# This will intentionally result in the following crossref output:
# `Unable to open source file /home/vagrant/index/tests/files/BuildTimeFile.cpp`
BUILD_TIME_FILE=BuildTimeFile.cpp
echo "int main() { return 0; }" > $BUILD_TIME_FILE
$CXX -DTEST_MACRO1 -DTEST_MACRO2 $BUILD_TIME_FILE -std=c++17 -c -o $OBJDIR/BuildTimeFile.o -Wall
rm BuildTimeFile.cpp

GENERATED_FILE=$OBJDIR/GeneratedFile.cpp
echo "int main() { return 0; }" > $GENERATED_FILE
$CXX -DTEST_MACRO1 -DTEST_MACRO2 $GENERATED_FILE -std=c++17 -c -o $OBJDIR/GeneratedFile.o -Wall

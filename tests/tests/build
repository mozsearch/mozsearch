#!/usr/bin/env bash

set -x # Show commands
set -eu # Errors/undefined vars are fatal
set -o pipefail # Check all commands in a pipeline

mkdir -p $OBJDIR

# Add the special clang flags.
$MOZSEARCH_PATH/scripts/indexer-setup.py > $INDEX_ROOT/config
source $INDEX_ROOT/config

cd $INDEX_ROOT/files
for f in *.cpp
do
  $CXX -DTEST_MACRO1 -DTEST_MACRO2 $f -std=c++17 -c -o $OBJDIR/${f%%.cpp}.o -Wall
done

export CARGO_TARGET_DIR=$OBJDIR
cargo clean
cargo build

## Re-map files dynamically generated by build.rs to a consistent path.
#
# This is a cut-down version of what we do in mozsearch-mozilla's
# process-tc-artifacts.sh script.  Please consult its documentation, as all
# comments have been removed from this file in the interest of not having the
# comments diverge:
# https://github.com/mozsearch/mozsearch-mozilla/blob/master/shared/process-tc-artifacts.sh

function move_file {
    mkdir -p "$(dirname $2)"
    mv "$1" "$2"
}

# Enter objdir to normalize the rust build script paths.
pushd $OBJDIR

# Difference: We have no RUST_PLATFORM dir at the root, just "debug".
PATH_TRANSFORM="s#^((debug|release)/build/([^/]+)-[0-9a-f]+/out/(.+))\$#\1 __RUST_BUILD_SCRIPT__/\3/\4#p"
find "debug" -type f  | sed -nEe "$PATH_TRANSFORM" | while read -r source target; do
  move_file "$source" "$target"
done

# Leave the objdir now that we're done normalizing build-dir paths.
popd


## Normalize the save-analysis paths.
# Normalize the source root off to make source paths relative.
NORMALIZE_EXPR='s#/vagrant/tests/tests/files/##g'
# Normalize the OBJDIR root off to make relative __GENERATED__ paths.  OBJDIR
# will look like "/home/vagrant/index/tests/objdir" and so will not overlap
# at all with the source path, prefix-wise.
NORMALIZE_EXPR+=";s#$OBJDIR#__GENERATED__#g"
# Apply the equivalent of the __RUST_BUILD_SCRIPT__ transform from the preceding
# section.  We're including the __GENERATED__ in the input and output for extra
# paranoia.
NORMALIZE_EXPR+=';s#"__GENERATED__/(debug|release)/build/([^/]+)-[0-9a-f]+/out/([^"]+)"#"__GENERATED__/__RUST_BUILD_SCRIPT__/\2/\3"#g'

# parallel -q quotes the semicolons
find $OBJDIR -type f -name "*.json" | parallel -q --halt now,fail=1 sed --in-place -Ee "$NORMALIZE_EXPR" {}

# Firefox generates files named something like Configure.cpp during
# the build process, but their source files are not around by the time
# we run the analysis. crossref.rs needs to be able to deal with this
# case by ignoring the error and continuing with the other files,
# rather than bailing out. This simulates that case.
BUILD_TIME_FILE=BuildTimeFile.cpp
echo "int main() { return 0; }" > $BUILD_TIME_FILE
$CXX -DTEST_MACRO1 -DTEST_MACRO2 $BUILD_TIME_FILE -std=c++17 -c -o $OBJDIR/BuildTimeFile.o -Wall
rm BuildTimeFile.cpp

GENERATED_FILE=$OBJDIR/GeneratedFile.cpp
echo "int main() { return 0; }" > $GENERATED_FILE
$CXX -DTEST_MACRO1 -DTEST_MACRO2 $GENERATED_FILE -std=c++17 -c -o $OBJDIR/GeneratedFile.o -Wall
